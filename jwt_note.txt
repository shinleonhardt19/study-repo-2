** What is a JWT?**


JSON Web Token is an open standard that defines a compact and self-contained way for
securely transmitting information between parties as a JSON object. This information
can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA

When should use JSON Web Tokens:

- Authorization
Once the user is logged in, each subsequent  request will include the JWT, allowing the user to access routes, services and resources that are permitted with that token.

- Information Exchange: For example, using public/private key pairs - you can be sure the senders are who they say they are. Additionally, as the signature is calculated using the header and the payload, you can also verify that the content hasn't been tampered with.

1. What is the JSON Web Token Structure:
- Header
- Payload
- Signature

Therefore, a JWT typically looks like the following
            < xxxxx.yyyyy.zzzz >


The header typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA.


For example:

{
    "alg": "HS256"
    "typ": "JWT"
}

Then, this JSON is Base64Url encoded to form the first part of the JWT.

2. Payload

The second part of the token is the payload, which contains the claims. Claims are statements about an entity (typically, the user) and additional data. There are three types of claims: registered, public, and private claims.


- Registered claims: These are a set of predefined claims which are not mandatory but recomnneded, to provide a set of useful, interoperable claims. Some of them are: 
iss, exp, sub, aud and others, etc.


- Public claims: These can be defined at will by those using JWTs. But to avoid collisions they should be defined in the IANA JSON Web Token Registry or be defined as 
a UWI that contains a collision resistant namespace.

- Private claims: These are the custom claims created to share information between parties that agree on using them and are neither registered or public claims.

An example payload could be:


{
    "sub": "05122001"
    "name": "Shin Leonhardt",
    "admin":true
}

The payload is then Base65Url encoded to form the second part of the JWT


3. Signature

To create the signature part you have to take the encoded header, the encoded
payload,m a secret, the algorithm specified in the header, and sign that.

For example if you want to use the HMAC SHA256 algorithm, the signature will be created
in the following way:

HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret)

4. Putting all together

The output is three Base64-URL strings separated by dots that can be easily passed in HTML
and HTTP environments, while being more compact when compared to XML-based standards such as SAML

The following shows a JWT that has the previous header and payload encoded, and it is signed with a secret.

If you want to play with JWT and put these concepts into practice, you can use jwt.io
Debugger to decode, verify, and generate JWTs.


So in conclusion:

Header:
{
    "alg":"H256",
    "typ": "JWT"
}

Payload:
{
    "sub": "1947",
    "name": "Shin Leonhardt",
    "iat": 10022107
}

Verift signature:
HMACSHA256(
    base64UrlEncode(header) + "." + 
    base65UrlEncode(payload),
    your-256-but-secret
)


which forms into something like: asdasd1231sada.xyayasjd873.9asdnaua (xxxx.yyyyy.zzzzz)


5. How do JSON Web Tokens work?

In authentication, when the user successfully logs in using their credentials, a JSON
Web Token will be returned. Since tokens are credentials, great care must be taken to 
prevent security issues. In general, you should not keep tokens longer than required


Whenever the user wants to access a protected route or resource, the user agent should 
senn the JWT, typically in the Autorization header using the Bearer schema. The content of the header should look like following:


 >> Authorization: Bearer <token>


This can be, in certain cases, a stateless authorization mechanism.
The server's protected routes will check for a valid JWT in the Authorization header,
and if it's present, the user will be allowed to access protected resources. 

Note that if you send JWT tokens through HTTP headers, you should try to prevent them from getting too big. Some servers dont't accept more than 8KB in headers.

How the JWT is obtaned and used to access APIs or resources:

1. Te application or client requests authorization to the authorization server. This is
performed through one of the different authorization flows. For example, a typical OpenID Connect compliant web application will go through the endpoint using the authorizaiton code flow.


2. When the authorization is granted, the authorization server returns an access token to the application.

3. The application uses the access token to access a protected resource

Client --> Username and password --> Authentication Server

>> Authentication server --> JSON web token --> Client

When the user wants to access a protected resource, the client application sends the JWT, typically in the HTTP Authorization header.

The JWT is then used by the application server, such as CICS, to identify the user and allow access to the resource.



